1. 프레임워크와 라이브러리의 차이
 - 라이브러리는 개발자가 능동적으로 사용한다
 - 프레임워크는 개발자가 작성한 코드를 돌려준다
   개발자의 코드를 탑재해서 돌려주므로 container라고도 한다

2. 스프링을 사용하는 이유 (IoC × AOP 컨테이너)
- 스프링은 IoC컨테이너(제어역전 컨테이너)
     코드의 흐름을 개발자가 아니라 스프링이 제어
     대표적으로 개발자가 객체가 new하지 않고 스프링이 객체를 생성한다(@Controller ...)
     스프링이 객체를 생성해서 가지고 있다고 개발자가 필요로 하면 "주입"
- 스프링은 AOP컨테이너
    반복되는 작업(로그인...)을 분리해서 개발자가 한번 만들어 놓으면 필요한 곳에 스프링이 "주입"

3. 스프링이 특정 어노테이션이 걸려있는 객체를 생성
    @Component @Repository @Service @Controller
    주입 하는 어노테이션 @Autowired

4. 스프링이 생성한 객체 : spring been -> 주입의 대상
- 스프링빈의 객체 이름은 첫글자를 소문자로 바꾼 것
     SampleController 클래스의 빈 이름은 sampleController
     그렇다면
        com.example.demo.product.SampleController
        com.example.demo.member.SampleController
- 3번에서 말한 4가지 어노테이션이 걸린 클래스를 스프링이 찾는데 .. 이 찾는 범위가
  처음에 com.example.demo.prouct.SampleController는 @Controller를 지정해도 빈이 될 수 없다(검색을 안하다)

5. 생명주기(life cycle)
- 우리가 만든 스프링빈은 스프링 컨테이너가 생성, 운영, 파괴를 담당
  객체가 태어나서 살다가 죽는 것을 생명주기 -> 생명주기에 따른 함수들을 생명주기 메소드
- 보통 자바 -> 자바 서블릿(웹용 자바) -> 스프링으로 넘어오는데 우리는 파이썬으로 웹 프로그래밍 기초를 했다
  면접에서 자바 웹을 물어보면 .. 파이썬으로 했다
  스프링은 생명주기 메소드가 아니라 생명주기 어노테이션
  @PostConstruct
  @PreDestroy